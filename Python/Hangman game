# first create the file 'palavras.txt' in the same directory and write the words that can be part of the game separated by line breaks
# example
    # palavras.txt
        #   house
        #   eatable
        #   fly
        #   warm
        #   grin
        #   abiding


from random import randint

# São os possíveis status do jogo
# Board (tabuleiro)
tabuleiro = ['''

>>>>>>>>>>Jogo da Força<<<<<<<<<<

+---+
|   |
    |
    |
    |
    |
=========''', '''

+---+
|   |
O   |
    |
    |
    |
=========''', '''

+---+
|   |
O   |
|   |
    |
    |
=========''', '''

 +---+
 |   |
 O   |
/|   |
     |
     |
=========''', '''

 +---+
 |   |
 O   |
/|\  |
     |
     |
=========''', '''

 +---+
 |   |
 O   |
/|\  |
/    |
     |
=========''', '''

 +---+
 |   |
 O   |
/|\  |
/ \  |
     |
=========''']

class Hangman:
    
    def __init__(self, palavra):
        self.palavra = palavra
        self.letras_certas = []
        self.letras_erradas = []
    

    # Método para verificar se a letra escolhida é ou não correta
    def guess(self, letra):
        if letra in self.palavra and letra not in self.letras_certas:
            self.letras_certas.append(letra)
        elif letra not in self.palavra and letra not in self.letras_erradas:
            self.letras_erradas.append(letra)
        else:
            return False
        return True


    # Método para verificar se o jogo ainda pode ser jogado
    def hangman_over(self):
        return self.hangman_won() or (len(self.letras_erradas) == 6)


    # Método para verificar se  jogador venceu o jogo
    def hangman_won(self):
        if '*' not in self.hide_word():
            return True
        else:
            return False


    # Método para esconder as letras ainda não escolhidas
    def hide_word(self):
        hiden_word = ''
        for letra in self.palavra:
            if letra not in self.letras_certas:
                hiden_word = hiden_word + '*'
            else:
                hiden_word = hiden_word + letra
        return hiden_word
    
    # Método para imprimir o status do jogo
    def game_status(self):
        print(tabuleiro[len(self.letras_erradas)])
        print('\nPalavra: ' + self.hide_word())
        print('\nLetras Acertadas: ')
        for letras in self.letras_certas:
            print(letras)
        print('\nLetras Erradas: ')
        for letras in self.letras_erradas:
            print(letras)
        print()
        return True
    

# Função para pegar uma palavra aleatória de um banco de palavras
def random_word():
    with open('palavras.txt', 'rt') as file:
        palavras = file.readlines()
    return palavras[randint(0, len(palavras))].strip()


def continuar_jogando():
    jogar = input('Você deseja jogar? \n[1-Sim ou 2-Não]\n')
    if jogar == '1': return True
    else: False

def main():

    while(continuar_jogando() == True):

        jogo = Hangman(random_word())

        while jogo.hangman_over()==False:
            jogo.game_status()
            letra = input('Digite uma letra: ')
            jogo.guess(letra)
            print('\n' * 100)

        jogo.game_status()

        if jogo.hangman_won() == True:
            print('\nParabéns! Você vendeu!!')
        else:
            print("\nGame over! Você enforcou o coitado!")
            print("A palavra certa era " + jogo.palavra)

    print('\nFoi bom jogar com você!\n')

if __name__ == "__main__":
	main()
