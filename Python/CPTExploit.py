# Questa versione del programma è stata sviluppata da Luca Di Bello, il progetto generale e di Luca Di Bello e Filippo Finke della I2BB 
# @author Luca Di Bello
#TODO Richieste con il proxy di sore
import requests
import re
import sys
import datetime
import time

from colorama import init
init()
from colorama import Fore, Back, Style
from HTTPDigestAuth import HTTPProxyDigestAuth

# Fore: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.
# Back: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.
# Style: DIM, NORMAL, BRIGHT, RESET_ALL

HEADER = '\033[95m'
OKBLUE = '\033[94m'
OKGREEN = '\033[92m'
WARNING = '\033[93m'
FAIL = '\033[91m'
ENDC = '\033[0m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'

GCPTGLOBAL = 'http://212.117.109.242:1935/'
GCPTLOCAL = 'http://gcpt.cpt.local/'

def isTimeFormat(input):
    try:
        time.strptime(input, '%H:%M')
        return True
    except ValueError:
        return False

def unlock(oraInizio, oraFine, sidCode):
    #Richiesta al server:
    #Da fare curl to python -> curl 'http://gcpt.cpt.local/rete_accesso_internet.php?SIDGCPT=e7a789ddff1e6b77245f9bffd5170d8d' -H 'Cookie: SIDGCPT=e7a789ddff1e6b77245f9bffd5170d8d' -H 'Origin: http://gcpt.cpt.local' -H 'Accept-Encoding: gzip, deflate' -H 'Accept-Language: en-GB,en-US;q=0.9,en;q=0.8' -H 'Upgrade-Insecure-Requests: 1' -H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8' -H 'Cache-Control: max-age=0' -H 'Referer: http://gcpt.cpt.local/rete_accesso_internet.php?SIDGCPT=e7a789ddff1e6b77245f9bffd5170d8d' -H 'Connection: keep-alive' --data 'stud%406245=6245&dalle=13%3A42&alle=16%3A30&libera=Sblocca+selezionati&stud%406247=6247&stud%406251=6251&stud%406252=6252&stud%406256=6256&stud%406261=6261&stud%406264=6264&stud%406269=6269&stud%406270=6270&per_classi=1&per_gruppi=&per_lezioni=&id_anno_scol=22&semestre=2&id_classe=3822&matprof=&visualizza_stato=Visualizza+stato' --compressed

    if not isTimeFormat(oraInizio) or not isTimeFormat(oraFine):
        message = Fore.RED + "[ERROR] - Non hai inserito l'ora di inizio o di fine con il formato HH:MM" + Fore.RESET
        return message
    data = [
       ('stud@6245', '6245'),
       ('dalle', str(oraInizio)),
       ('alle', str(oraFine)),
       ('libera', 'Sblocca selezionati'),
       ('stud@6247', '6247'),
       ('stud@6251', '6251'),
       ('stud@6252', '6252'),
       ('stud@6256', '6256'),
       ('stud@6261', '6261'),
       ('stud@6264', '6264'),
       ('stud@6269', '6269'),
       ('stud@6270', '6270'),
       ('per_classi', '1'),
       ('per_gruppi', ''),
       ('per_lezioni', ''),
       ('id_anno_scol', '22'),
       ('semestre', '2'),
       ('id_classe', '3822'),
       ('matprof', ''),
       ('visualizza_stato', 'Visualizza stato'),
    ]

    response = requests.post(GCPTLOCAL + 'rete_accesso_internet.php', params=(('SIDGCPT', sidCode),), cookies={'SIDGCPT': sidCode,}, data=data)
    #al blocco = è stato bloccato
    print(response.text)
    if 'Cache Accesso negato.' in response.text:
        print(Fore.RED + "CRITICALA ERROR - Cache Accesso Negato.")
        return False
    elif 'accesso consentito' in response.text:
        return True
    else:
        if 'Per favore identificarsi' in response.text:
            print(Fore.RED + "[LOGIN ERROR] - Eseguire il login prima di sbloccare l'internet.." + Fore.RESET)
        return response.text

def lockInternet(sidCode):

    data = [
        ('stud@6245', '6245'),
        ('blocca', 'Blocca selezionati'),
        ('stud@6247', '6247'),
        ('stud@6251', '6251'),
        ('stud@6252', '6252'),
        ('stud@6256', '6256'),
        ('stud@6261', '6261'),
        ('stud@6264', '6264'),
        ('stud@6269', '6269'),
        ('stud@6270', '6270'),
        ('per_classi', '1'),
        ('per_gruppi', ''),
        ('per_lezioni', ''),
        ('id_anno_scol', '22'),
        ('semestre', '2'),
        ('id_classe', '3822'),
        ('matprof', ''),
        ('visualizza_stato', 'Visualizza stato'),
    ]

    response = requests.post(GCPTLOCAL + 'rete_accesso_internet.php', params=(('SIDGCPT', sidCode),), cookies={'SIDGCPT': sidCode, }, data=data)
    #al blocco = è stato bloccato
    print(response.text)
    if 'Cache Accesso negato.' in response.text:
        print(Fore.RED + "CRITICALA ERROR - Cache Accesso Negato.")
        return False
    elif 'bloccato' in response.text:
        return True
    else:
        if 'Per favore identificarsi' in response.text:
            print(Fore.RED + "[LOGIN ERROR] - Eseguire il login prima di sbloccare l'internet.." + Fore.RESET)
        return response.text

def getInternetState(sidCode):
    data = [
        ('id_anno_scol', '22'),
        ('semestre', '2'),
        ('id_classe', '3822'),
        ('per_classi', '1'),
        ('visualizza_stato', 'Visualizza stato'),
    ]

    response = requests.post(GCPTLOCAL + 'rete_accesso_internet.php', params=(('SIDGCPT', sidCode),), cookies={'SIDGCPT': sidCode, }, data=data)
    print(response.text)
    if 'Cache Accesso negato.' in response.text:
        print(Fore.RED + "CRITICALA ERROR - Cache Accesso Negato.")
        return False
    elif 'bloccato' in response.text:
        return False
    else:
        return True

def getFakeReqCookie():
    try:
        #Fa una richiesta fake con un cookie sbagliato, questo perchè quando il sito vede che il cookie è errato ne genera uno nuovo
        site = str('http://gcpt.cpt.local/login.php')
        print(Back.CYAN + "[INFO] - Sto cercando di prendere il cookie al sito " + site + Back.RESET)
        
        response = requests.post(str(site))

        proxies = {
            "http": "192.168.20.130:8080",
            "https": "192.168.20.130:8080",
        }


        auth = HTTPProxyDigestAuth("username", "password")

        # HTTP
        r = requests.get("http://www.google.co.jp/", proxies=proxies, auth=auth)
        r.status_code  # 200 OK

        # HTTPS
        r = requests.get("https://www.google.co.jp/", proxies=proxies, auth=auth)
        r.status_code  # 200 OK

        cookie = re.findall("SIDGCPT=(.*?) ", response.text)
        cookieString = Back.YELLOW + Back.YELLOW + '---------------[START RESPONSE]--------------- \n' + response.text + '\n---------------[END RESPONSE]---------------' + Back.RESET
        print(cookieString)
        return cookie[0]
    except Exception as serverError:
        stringaErrore = str(Fore.RED + "[Error] Errore durante la richiesta al server " + serverError.args[0] + Fore.RESET)  
        return  stringaErrore
    

def login(username, password, sidCode):

    data = [
	  ('usernm', username),
	  ('passwrd', password),
	  ('submit', 'Invia'),
	]

    response = requests.post('http://gcpt.cpt.local/login.php', params=(('SIDGCPT', sidCode),), cookies={'SIDGCPT': sidCode, }, data=data)
    print(response.text)
    if 'Cache Accesso negato.' in response.text:
        print(Fore.RED + "CRITICAL ERROR - Cache Accesso Negato.")
        return False
    elif 'riprovare' in response.text:
        return False
    else:
        return True

def printMenu():
    print(Fore.BLUE + "########################################" + Fore.RESET)
    print(Fore.BLUE + "# 1. Aprire internet                   #" + Fore.RESET)
    print(Fore.BLUE + "# 2. Chiudere internet                 #" + Fore.RESET)
    print(Fore.BLUE + "# 3. Stato Internet                    #" + Fore.RESET)
    print(Fore.BLUE + "# 4. Uscire dal programma              #" + Fore.RESET)
    print(Fore.BLUE + "########################################" + Fore.RESET)



genCookie = getFakeReqCookie()
print("Ho preso il cookie: " + genCookie)
logged = login('CENSOR :(','CENSOR :(', genCookie)
if logged == True:
    print(Fore.GREEN + "[SUCCESS] Hai effettuato il login con successo." + Fore.RESET)
    printMenu()
    
    chosed = False
    while not chosed:
        try:
            mode = int(input('Input:'))   
            if mode == 1:
                #SBLOCCA INTERNET
                state = unlock('8:20','14:45', genCookie)
                if state == True:
                    print(Fore.GREEN + "[SUCCESS] Internet sbloccato correttamente." + Fore.RESET)
                else:
                    print(Fore.RED + "[ERROR] Errore durante lo sblocco di internet..." + Fore.RESET)
                    print(state)
                
                #chosed = True
            elif mode == 2:
                #CHIUDE INTERNET
                state = lockInternet(genCookie)
                if state == True:
                    print(
                        Fore.GREEN + "[SUCCESS] Internet bloccato correttamente." + Fore.RESET)
                else:
                    print(Fore.RED + "[ERROR] Errore durante il blocco di internet..." + Fore.RESET)
                    print(state)
                
                #chosed = True
            elif mode == 3:
                #PRENDE STATO INTERNET
                state = getInternetState(genCookie)
                if state:
                    print(Fore.GREEN + '[INFO] - La connessione internet è già aperta a tutti.' + Fore.RESET)
                else:
                    print(Fore.YELLOW + '[INFO] - La connessione internet non è aperta a tutti...' + Fore.RESET)
            
            elif mode == 4:
                #CHIUDE IL PROGRAMMA
                chosed = True
                print("Chiudo il programma! Bye!")
                time.sleep(1)
                sys.exit()
            else:
                #SE SI INSERISCE UN VALORE ERRATO
                print(Fore.MAGENTA + "[INFO] Scegli un numero contenuto in questo range --> [1;3]" + Fore.RESET)
        except ValueError:
            print(Fore.RED + "[ERROR] - Non è un numero.. scegli un numero contenuto in questo range --> [1;3]" + Fore.RESET) 
else:
    print(Fore.RED + "[CRITICAL ERROR] Nome utente e/o password errati. :'(" + Fore.RESET)
