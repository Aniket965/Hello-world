import pandas as pd
import numpy as np
from statistics import mean

class LogisticRegression:
    
    #initializing the parameters required by the model
    def __init__(self, alpha=0.01, num_iter=100000, threshold=0.5, fit_intercept=True, verbose=False):
        self.alpha = alpha
        self.num_iter = num_iter
        self.threshold = threshold
        self.fit_intercept = fit_intercept
        self.verbose = verbose
    
    #sigmoid function
    def __sigmoid(self, h_theta):
        return 1/(1+np.exp(-h_theta))
    
    #hypothesis function
    def __calculate_h(self, X_train):
        return self.__sigmoid(np.dot(X_train,self.theta))
    
    #cost function
    def __calculate_j(self, h_theta, Y_train):
        return (-Y_train * np.log(h_theta) - (1 - Y_train) * np.log(1 - h_theta)).mean()
     
    #adding intercept to the training set
    def __add_intercept(self, X_train):
            intercept = np.ones((X_train.shape[0], 1))
            return np.concatenate((intercept, X_train), axis=1)
    
    #main algorithm, which uses gradient descent at the hood    
    def fit(self, X_train, Y_train):
        
        #adding intercept
        if self.fit_intercept:
            X_train = self.__add_intercept(X_train)
        
        #initializing theta
        self.theta = np.zeros(X_train.shape[1])
        
        #training set size
        m = Y_train.size
        
        iter_cost = []
        iteration = 0
        while iteration < self.num_iter :
            
            h_theta =  self.__calculate_h(X_train)
            j_theta = self.__calculate_j(h_theta, Y_train)
            gradient = np.dot(X_train.T, (h_theta - Y_train)) / m
            self.theta -= self.alpha * gradient
            
            if self.verbose and iteration%1000 == 0:
                print('Iter. No : ' + str(iteration) + ' -> Cost : ' + str(j_theta))                
            
            iter_cost.append([iteration, j_theta])
            iteration+=1
            
        return iter_cost
    
    #predicts the value for the given test set
    def predict(self, X_test):
        if self.fit_intercept:
            X_test = self.__add_intercept(X_test)
        
        return (self.__calculate_h(X_test) > self.threshold)
       
    #function which calculates accuracy of the trained model
    def accuracy(self, X_test, Y_test):            
        preds = self.predict(X_test)
        return (preds == Y_test).mean()
  
