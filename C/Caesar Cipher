// to copile -> $ gcc -o cipherfile main.c
// create a link -> $ ln cipherfile decipherfile
// to execute (cipher) -> $ ./cipherfile in.txt out.txt 5
        // in.txt is the original file
        // out.txt is the cipher file
        // 5 is the key (caesar cipher)
// to execute (decipher) -> $ ./decipherfile cripto.txt out.txt 5


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef char byte;

byte cipher(byte message, byte key)
{
    return message + key;
    // avançando na tabela ascii
}

byte decipher(byte cipher, byte key)
{
    return cipher - key;
}

int main(int argc, char *argv[])
{
    FILE *in, *out;
    byte (*op)(byte, byte) = NULL;
    byte key;
    int c;

    if (argc < 4)
    {
        fprintf(stderr, "Uso: %s <entrada> <saida> <chaves>\n", argv[0]);
        return -1;
    }

    in = fopen(argv[1], "r");

    if(!in)
    {
        fprintf(stderr, "Erro ao abrir %s para leitura\n", argv[1]);
        return -2;
    }

    out = fopen(argv[2], "w");

    if(!out)
    {
        fprintf(stderr, "Erro ao abrir %s para escrita\n", argv[2]);
        fclose(in);
        return -3;
    }

    if(!strcmp(argv[0], "./cipherfile"))
    {
        op = cipher;
    }

    else if(!strcmp(argv[0], "./decipherfile"))
    //  se o argv[0] for igual "./decipherfile" ...
    {
        op = decipher;
    }

    else
    {
        fprintf(stderr, "Operação desconhecida\n");
        fclose(in);
        fclose(out);

        return -4;
    }

    key = (byte) atoi(argv[3]);
    //            ^ ascii to int

    while((c = fgetc(in)) != EOF)
    {
        fputc(op((byte) c, key), out);
    }

    fclose(in);
    fclose(out);

    return 0;
}
