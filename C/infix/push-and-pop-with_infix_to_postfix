/*************************************
 *	@author: Jaako A. Andes	     *
 *	@course: BSCS 2A	     *
 *	Copyright 2016 - 2017	     *
 *				     *
 *	    PUSH POP STACK	     *
 *				     *
 *				     *
 *************************************/

//HEADER FILES
#include<stdio.h>
#include<stdlib.h>



//GLOBAL VARIABLES
#define TRUE 1
#define FALSE 0
#define MAX 100
int top = FALSE;
int status = FALSE;
int ch = FALSE;
int iTOf = FALSE;



//FUNCTION PROTOTYPES
void push(int stack[], int item);
void display(int stack[]);
int pop(int stack[]);
void choose(int stack[], int item);
void ItoF(int stack[], int item);

//Whautasssaaa!!


//START OF PROGRAM
void main(){
	
	//RECOMMENDED VARIABLES
	int stack [MAX]; int item = FALSE;
	top = -1;

	//PRIMARY INTERFACE
	printf("\t\t+---------------------------+\n");
	printf("\t\t|        +PUSH POP+         |\n");
	printf("\t\t|           AND             |\n");
	printf("\t\t|INFIX TO POSTFIX CONVERSION|\n");
	printf("\t\t|---------------------------|\n");
	printf("\t\t|    @author: Jaako Andes   |\n");
	printf("\t\t|    @course: BSCS 2A       |\n");
	printf("\t\t+---------------------------+\n\n");
	
	choose(stack, item);

}


//CHOOSING FUNCTION
void choose(int stack[], int item){
    	
	
	//SECONDARY DISPLAY
	printf("\t\t[!] WARNING!! LIFO(LAST IN FIRST OUT)\n");
	printf("\t\t\t[1.] PUSH(INSERT)\n");
	if(iTOf == FALSE){
	printf("\t\t\t[2.] POP(DELETE){ON}\n");}
	else if(iTOf == TRUE){
	printf("\t\t\t[2.] POP(DELETE){OFF}[!]\n");}
	printf("\t\t\t[3.] EXIT(TERMINATE PROGRAM)\n");
	if(iTOf == FALSE){
	printf("\t\t\t[4.] INFLIX(TO POSTFIX){OFF} PUSH WILL NOT GO ON INFLIX\n");
	printf("\t\t\t[0.] CONVERT THE INFLIX!{OFF}\n\t\t");}
	else if(iTOf == TRUE){
	printf("\t\t\t[4.] INFLIX(TO POSTFIX){ON}[!] PUSH DATA WILL GO ON INFLIX\n");
	printf("\t\t\t[0.] CONVERT THE INFLIX!{ON}[!]\n\t\t");}

	scanf("%d", &ch);
	if (ch < 0 || ch > 4){
      		printf("\nInvalid Choice, Please try again\n");
			choose(stack, item);
			}
	switch(ch){
		case 1:
			printf("Enter element to be pushed: \n");
			scanf("%d", &item);
			push(stack, item);
			if(status){
				printf ("After Pushing \n");
   				display (stack);
   				if (top == (MAX-1))
					printf ("The Stack is Full\n");
			}
			else printf ("Stack overflow on Push\n");
			choose(stack, item);
			break;
       		case 2:
			if(iTOf == TRUE){
				printf("\nThe POP is off turn off the INFLIX to turn POP on again!\n");
				choose(stack, item);
			}
			item = pop (stack);
			if (status){
				printf ("The Popped item is %d .  After Popping: \n",item);
				display (stack);
				}
				else printf ("Stack underflow on Pop\n");
			choose(stack, item);
			break;
		case 0:
			if(iTOf == FALSE){
				printf("\nCONVERSION is off turn on the INFLIX to turn on CONVERSION!\n");
				choose(stack, item);
			}
			ItoF(stack, item);
			break;
		case 4:
			if(iTOf == FALSE){
			iTOf = TRUE;
			printf("\nINFLIX TURNED ON!\n");}
			else if(iTOf == TRUE){
			iTOf = FALSE;
			printf("\nINFLIX TURNED OFF!\n");}
			choose(stack, item);
			break;
       		}
}


//PUSH FUNCTION
void push (int stack[], int item){
	if (top == (MAX-TRUE))
		status = FALSE;
   	 else{
		status = TRUE;
		++top;
		stack [top] = item;
    	}
}
 

//POP FUNCTION
int pop (int stack[]){  
	int ret;
    	if (top == -1){
		ret = FALSE;
		status = FALSE;
    		}
   		else{
			status = TRUE;
			ret = stack[top];
			--top;
    			}
return ret;
}
 

//FUNCTION TO DISPLAY STACK
void display (int stack[]){
	int i = FALSE;
    	printf ("\nThe Stack is: \n");
		if(top == -1)
			printf("EMPTY\n");
   			 else{
				for(i = top; i >= FALSE; --i){
					printf("+----------+\n");
  					printf ("|%3d       |\n",stack[i]);
					printf("+----------+\n");
						}
   					 }
    					printf ("\n");
}


//INFLIX TO POSTFIX BABY!
void ItoF(int stack[], int item){
	




}


