#include <stdio.h>
#include <stdlib.h>

struct Node {
  int data;
  struct Node *next;
};

typedef struct Node *head;
Node newList();
Node addNode(Node list, int value);

struct Node * reverse(struct node *prev,struct node *cur);
{
if (cur)
{reverse(cur,cur->next);
cur->next=prev;
}
else
{head=prev
}
}


int main(int numParms, char *parms[]){
  Node myList;
  myList = newList();

  
  myList = addNode(myList, 5);
  myList = addNode(myList, 4);
  myList = addNode(myList, 3);
  myList = addNode(myList, 2);
  myList = addNode(myList, 1);
  printList(myList);
  
  head=reverse(NULL,head);
  printList(myList);
  
  printf("End of program.\n");

  return 0;

}

Node newList(){

  LinkedList list;
  list = (LinkedList) malloc(sizeof(struct linkedList));
  
  list -> next = NULL;
  list -> data = 0;
 
  return list;
}

Node addNode(LinkedList list, int value){

  Node newNode;

  //Allocate memory in heap to the node
  newNode = (Node) malloc(sizeof(Node));
  //Asign value to newNode.data
  newNode -> data = value;
  //Set the next node for the newNode as the current top of the list
  newNode -> next = list -> top;

  //Set the top of the list to newNode and increase the size of the list
  list -> top = newNode;
  list -> size++;

  return list;
}

void printList(Node list){
  int count;

  //Only print the list if there are 1 or more nodes
  if(list->size > 0){

    printf("Contents of list:\n");

    for(count=0; count<list->size; count++){
      printf("Element %d is %d\n", count, getNode(list, count));
    }

    printf("\n");

  } else {
    printf("The list is empty.");
  }
}
