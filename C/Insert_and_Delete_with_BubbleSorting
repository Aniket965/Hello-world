/* 	Jaako A. Andes \ BSCS - 2A
	INSERTION AND DELETION
 	Copyright 2016 - 2017		*/

//HEADER FILE
#include <stdio.h>
#include <string.h>

//Function Prototype
int ID_Option(int x[],int y);
int print(int x[],int y);
int scan(int x[], int y);
int insert(int x[], int y);
int delete(int x[], int y);
int bsort(int x[], int y);
//The code is not Beautiful but it will work. I think?
int main(){
	int arr = 0; int pro = 0; 
	int count;  int safe = 0;
	printf("[+]Enter the size of the array\n");
	scanf("%d",&arr);
	int array[arr];
	if(arr <= 0){
		printf("\t[!]Must be greater than 1\n");
		return 0;
	}
	printf("[!]Warning: Entering 0 below is a shortcut to Insert and Delete\n");
	printf("[+]Enter elements to be processed\n");
	scanf("%d",&pro);
	if(pro > arr){
		printf("\t[!]Enter within the array range\n");
		return 0;
	}else if(pro <= 0){
		ID_Option(array,arr);
		return 0;
	}
	//safe case
	for(count = 0; count < arr; count++){
		array[count] = 0;
	}
	printf("[^]Entering numbers\n");
	for(count = 0; count < pro; count++){
		printf("\t[!]For array[%d] : ", count);
		scanf("%d",&safe);
		array[count] = safe;
	}
	printf("\t[*]Finished!\n");
	scan(array, arr);
return 0;
}	
int scan(int x[], int y){
	int num = 0;
	printf("[!]Print all the numbers\n");
	printf("[+]Are you sure [1]Yes or [2]No?");
	scanf("%d",&num);
		if(num == 1){
			print(x,y);
			return 0;
		}else if(num == 2){
				ID_Option(x,y);
				return 0;
			}else printf("\t[*]Invalid Input\n");
}
int print(int x[], int y){
	int cout;
	for(cout = 0; cout < y; cout++){
		printf("%d)\tArray[%d] : %d\n", cout+1,cout, x[cout]);
	}
	ID_Option(x,y);
	return 0;
}
int ID_Option(int x[], int y){
	int pot = 0;
	printf("[!]Insert, Bubble Sort or Delete Option INVOKED!!!\n");
	printf("\t[1]Insert\n");
	printf("\t[2]Delete\n");
	printf("\t[3]Bubble Sort\n");
	printf("\t[100]Exit {^_^}\n");
	scanf("%d",&pot);
		if(pot == 1){
			insert(x,y);
			return 0;
		}else if(pot == 2){
				delete(x,y);
				return 0;
			}else if(pot == 100){
					printf("Muchas Gracias!!Hasta la vista");
					return 0;
				}else if(pot == 3){
					bsort(x,y);
					}
				 printf("\t[*]Invalid Input\n");
	return 0;
}
int insert(int x[], int y){
	int weed; int cot; int ins;
	int pos;  int val; int ins1;
	printf("[*]INSERT OPTION INVOKED!!\n");
	printf("\t[1]Insert?\n");
	printf("\t[2]Show?\n");
	printf("\t[3]Go back to menu\n");
	printf("\t[100]Exit?\n");
	scanf("%d",&weed);
	if(weed == 1){
		ins = y;
		printf("[^]Enter the position to be inserted : ");
		scanf("%d",&pos);
		printf("\n[!]Enter the value: ");
		scanf("%d",&val);
		printf("\n---INSERTING---\n");
		while(ins >= pos){
			x[ins+1] = x[ins];
			ins = ins - 1;
		}
		x[pos] = val;
		
		insert(x,y);
	}else if(weed == 2){
			for(cot = 0; cot < y; cot++){
				printf("%d)\tIndex[%d] : %d\n", cot+1,cot, x[cot]);
			}
			insert(x,y);
		}else if(weed == 100){
				return 0;
				}else if(weed == 3){
					ID_Option(x,y);
					}
	
}
int delete(int x[], int y){
	int drugs; int posx; int cotx = 0;
	
	printf("[*]DELETE OPTION INVOKED!!\n");
	printf("\t[1]Delete?\n");
	printf("\t[2]Show?\n");
	printf("\t[100]Exit?\n");
	scanf("%d",&drugs);
	if(drugs == 1){
		printf("[^]Enter the position to be Deleted : ");
		scanf("%d",&posx);
		printf("\n---DELETING---\n");
		x[posx] = 0;
		while(posx < y){
			x[posx] = x[posx+1];
			posx = posx + 1;
		}
		x[y] = 0;
		delete(x,y);
	}else if(drugs == 2){
			for(cotx = 0; cotx < y; cotx++){
				printf("%d)\tIndex[%d] : %d\n", cotx+1,cotx, x[cotx]);
			}
			delete(x,y);
		}else if(drugs == 100){
				return 0;
				}
	
}
int bsort(int x[], int y){
	int pots = 0; int drug = 0;
	int co = 0;  int temp = 0;
	printf("[*]BUBBLE SORT OPTION INVOKED!!\n");
	printf("\t[1]Bubble Sort?\n");
	printf("\t[2]Show?\n");
	printf("\t[100]Exit?\n");
	scanf("%d",&drug);
	if(drug == 1){
		printf("\n---MICHAEL BUBbLE SORTING---\n");
		while( pots < y){
			for(co = 0; co < y; co++){
				if(co == y){
					break;
					bsort(x,y);
				}
				if(x[co] >= x[co+1]){
					temp = x[co+1];
					x[co+1] = x[co];
					x[co] = temp;
				}
			}
		pots++;
		}
		bsort(x,y);
	}else if(drug == 2){
			for(co = 0; co < y; co++){
				printf("%d)\tIndex[%d] : %d\n", co+1,co, x[co]);
			}
			bsort(x,y);
		}else if(drug == 100){
				return 0;
				}
	
}
