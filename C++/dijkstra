// Dijkstra algorithm

#include <bits/stdc++.h>
using namespace std;

int n, m, s, t, b, w[1010][1010], visited[10010];

int inf = INT_MAX; 
vector<int> adj[1010]; //adj vector

int main(){
	cin >> n >> m;
	// reading graph
	for(int i = 0; i < m; i++){
		cin >> s >> t >> b;
		w[s][t] = w[t][s] = b; // Defining edges weights
		adj[s].push_back(t); // Defining adjacency vector
		adj[t].push_back(s);
	}

  // Distancy vector
	vector<int> dist(n+2, inf);

	priority_queue<pair<int,int> > q;
	q.push(make_pair(0, 0)); // Inicializing queue with root vertice
	dist[0] = 0; 

	while(!q.empty()){ 
		int v = q.top().second; 
		q.pop();
		if(visited[v] == 1) continue;
		visited[v] = 1; 
		for(int u : adj[v]){ // Iterating thru adjacencies
			if(dist[u] > dist[v] + w[v][u]){
				dist[u] = dist[v] + w[v][u]; 
				q.push(make_pair(-dist[u], u)); 
			}
		}
	}

	cout << dist[n+1] << endl;
}
