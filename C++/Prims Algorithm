#include <iostream>
#include<climits>
#include<cmath>
using namespace std;

int findminvertex(int * weights , bool* visited, int n)
{
  int minvertex = -1;
  for(int i = 0; i < n; i++)
  {
    if(!visited[i] && (minvertex == -1 || weights[i]<weights[minvertex]))
      minvertex = i;
  }
  return minvertex;
}
void prim(int** edges, int n)
{
  int*parent = new int[n];
  int* weights = new int[n];
  bool* visited = new bool[n];
  
  for(int i = 0; i<n; i++)
  {
    visited[i] = false;
    weights[i] = INT_MAX;
  }
  
  parent[0] = -1;
  weights[0] = 0;
  
  for (int i = 0; i<n; i++)
  {
    int minvertex = findminvertex(weights,visited,n);
    visited[minvertex]=true;
    for(int j = 0; j <n; j++)
    {
      if(edges[minvertex][j] != 0 && !visited[j])
      {
        if(edges[minvertex][j] < weights[j])
        {
          weights[j] = edges[minvertex][j];
          parent[j] = minvertex;
        }
      }
    }
  }
  
  for(int i = 1; i < n; i++)
  {
    cout<<min(parent[i],i)<<" "<<max(parent[i],i)<<" "<<weights[i]<<endl;
  }
  
}

int main()
{
  int V, E;
  cin >> V >> E;
  int ** edges = new int*[V];
  for(int i = 0; i < V; i++)
  {
    edges[i] = new int[V];
    for(int j = 0; j < V; j++)
      edges[i][j] = 0;
  }
  
  for(int i =0; i < E;i++)
  {
    int f,s,w;
    cin>>f>>s>>w;
    edges[f][s]=w;
    edges[s][f]=w;
  }

  prim(edges,V);
  for (int i = 0; i < V; i++)
  {
    delete [] edges[i];
  }
  
  delete [] edges;

  return 0;
}
