    // Given two integers a and b. The task is to print 
    // sum of all the digits appearing in the 
    // integers between a and b 
    #include <bits/stdc++.h>
    using namespace std; 
     
    // Memoization for the state results 
    long long dp[20][160][3][3][2]; 
     
    // Stores the digits in x in a vector digit 
   long long getDigits(long long x, vector <int> &digit) 
{ 
    while (x) 
    { 
        digit.push_back(x%10); 
        x /= 10; 
    } 
} 
     
    // Return sum of digits from 1 to integer in 
    // digit vector 
    long long digitSum(int idx, int sum,int even ,int odd , int tight, 
                            vector <int> &digit) 
    { 
        // base case 
        if (idx == -1) {
        if(even <= 2 && odd<= 2) return sum;
        return 0;
 
    }
            if(even > 2 || odd > 2) return 0;
 
     // checking if already calculated this state 
           
        if (dp[idx][sum][even][odd][tight] != -1 and tight != 1) 
            return dp[idx][sum][even][odd][tight]; 
     
        long long ret = 0; 
     
        // calculating range value 
        int k = (tight)? digit[idx] : 9; 
        for (int i = 0; i <= k ; i++)
        {      
            // caclulating newTight value for next state 
            int newTight = (digit[idx] == i)? tight : 0; 
                
                    if(i==0)
                    {
                      
            ret += digitSum(idx-1, sum+i,0,0, newTight, digit); 
                    }
            else if(i%2!=0){
                 ret += digitSum(idx-1, sum+i,0,odd+1, newTight, digit); 
           }
               else if(i%2==0){
                        ret += digitSum(idx-1, sum+i,even+1,0, newTight, digit); 
                  }
            // fetching answer from next state 
                    
                    
        } 
     
        if (!tight) 
        dp[idx][sum][even][odd][tight] = ret; 
     
        return ret; 
    } 
     
    // Returns sum of digits in numbers from a to b. 
    long long rangeDigitSum(long long a, long long b) 
    { 
        // initializing dp with -1 
        memset(dp, -1, sizeof(dp)); 
     
        // storing digits of a-1 in digit vector 
        vector<int> digitA; 
        getDigits(a-1, digitA); 
     
        // Finding sum of digits from 1 to "a-1" which is passed 
        // as digitA. 
        long long ans1 = digitSum(digitA.size()-1, 0,0,0, 1, digitA); 
     
        // Storing digits of b in digit vector 
        vector<int> digitB; 
        getDigits(b, digitB); 
                
        // Finding sum of digits from 1 to "b" which is passed 
        // as digitB. 
        long long ans2 = digitSum(digitB.size()-1, 0,0,0, 1, digitB); 
     
        return (ans2 - ans1); 
    } 
    void solve(){
        int t;
      cin>>t;
      while(t--)
      {
        long long l,r,k;
        cin>>l>>r;
       k= rangeDigitSum(l,r);
        cout<< k<<"\n";
     
      }}
    // driver function to call above function 
     int main(){
       
            ios_base::sync_with_stdio(false);   
            cin.tie(NULL);
           solve();
        return 0;
        } 
